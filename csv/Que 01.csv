S. No,Difficulty,Question Content (in Markdown),Question_short_text,Sub_Topics,Code_language,Solution Code,Front_Code_language,Prefilled Code For Each Code Language,Test_case_input,Test_case_output,Test_case_type,Code_language,Backend Code,is_valid
1,MEDIUM,"### Binary Search Position Finder

Given a sorted list of integers and a target integer, find the position of the target in the list using the binary search technique. If the target is not present in the list, return -1.

---

#### Input Format
- First line contains an integer `n` denoting the number of elements in the array.
- Second line contains `n` space-separated integers representing the sorted array `arr`.
- Third line contains a single integer `target` representing the value to be searched in the array.

#### Output Format
- Output a single integer representing the position of the target in the array (0-based index). If the target is not found, output -1.

---

#### Constraints
- 1 <= n <= 10^5
- -10^9 <= `arr[i]`, `target` <= 10^9
- `arr` is sorted in non-decreasing order

---

#### Example 1
###### Input
    5
    1 3 5 7 9
    7

###### Output
    3

###### Explanation
    Target 7 is found at index 3 in the array.

---

#### Example 2
###### Input
    5
    1 3 5 7 9
    6

###### Output
    -1

###### Explanation
    Target 6 is not present in the array, hence the output is -1.

---",Binary Search Position Finder,DATA_TYPE_LIST,PYTHON,"def binary_search(arr, target):
    left, right = 0, len(arr) - 1
    while left <= right:
        mid = left + (right - left) // 2
        if arr[mid] == target:
            return mid
        elif arr[mid] < target:
            left = mid + 1
        else:
            right = mid - 1
    return -1
",PYTHON,"def binary_search(arr, target):
    # Implement your function here
    pass",,,,PYTHON,"from solution import binary_search

def main():
    n = int(input())
    arr = list(map(int, input().split()))
    target = int(input())
    result = binary_search(arr, target)
    print(result)

if __name__ == ""__main__"":
    main()",true
,,,,,,,JAVA,"public class Solution {
    public int binary_search(int[] arr, int target) {
        // Implement your function here
    }
}","5
1 3 5 7 9
7",3,VISIBLE,JAVA,"import java.util.*;

public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] arr = new int[n];
        for (int i = 0; i < n; i++) {
            arr[i] = scanner.nextInt();
        }
        int target = scanner.nextInt();
        Solution solution = new Solution();
        int result = solution.binary_search(arr, target);
        System.out.println(result);
        scanner.close();
    }
}
",
,,,,,,,CPP,"#include <vector>
using namespace std;

int binary_search(vector<int>& arr, int target) {
    // Implement your function here
}","5
1 3 5 7 9
6",-1,VISIBLE,CPP,"#include <iostream>
#include <vector>
#include""solution.h""
using namespace std;

int binary_search(vector<int>& arr, int target);

int main() {
    int n;
    cin >> n;
    vector<int> arr(n);
    for (int i = 0; i < n; i++) {
        cin >> arr[i];
    }
    int target;
    cin >> target;
    int result = binary_search(arr, target);
    cout << result << endl;
    return 0;
}",
,,,,,,,C,"#include <stdio.h>
int binary_search(int arr[], int n, int target) {
    // Implement your function here
}","1
4
4",0,NORMAL_CASE,C,"#include <stdio.h>

#ifndef FILE1_H
#define FILE1_H
int binary_search(int arr[], int n, int target);
#endif

int main() {
    int n, target;
    scanf(""%d"", &n);
    int arr[n];
    for (int i = 0; i < n; i++) {
        scanf(""%d"", &arr[i]);
    }
    scanf(""%d"", &target);
    int result = binary_search(arr, n, target);
    printf(""%d\n"", result);
    return 0;
}",
,,,,,,,,,"1
4
5",-1,NORMAL_CASE,,,
,,,,,,,,,"8
1 2 3 4 5 6 7 8
5",4,NORMAL_CASE,,,
,,,,,,,,,"8
1 2 3 4 5 6 7 8
0",-1,NORMAL_CASE,,,
,,,,,,,,,"10
10 20 30 40 50 60 70 80 90 100
90",8,NORMAL_CASE,,,
,,,,,,,,,"3
-10 -5 0
0",2,NORMAL_CASE,,,
,,,,,,,,,"3
-10 -5 0
-5",1,NORMAL_CASE,,,
,,,,,,,,,"2
-1000000000 1000000000
1000000000",1,EDGE_CASE,,,
,,,,,,,,,"2
-1000000000 1000000000
-1000000000",0,EDGE_CASE,,,
,,,,,,,,,"5
1 3 3 3 5
3",1,NORMAL_CASE,,,
,,,,,,,,,"6
1 2 3 4 5 6
6",5,NORMAL_CASE,,,
,,,,,,,,,"4
-2 -1 0 1
2",-1,NORMAL_CASE,,,
,,,,,,,,,"4
3 3 3 3
3",0,NORMAL_CASE,,,
,,,,,,,,,"4
1 2 3 4
4",3,NORMAL_CASE,,,
,,,,,,,,,"6
-5 -3 -1 0 2 4
-3",1,NORMAL_CASE,,,
,,,,,,,,,"6
-5 -3 -1 0 2 4
2",4,NORMAL_CASE,,,
,,,,,,,,,"5
10 20 30 40 50
25",-1,NORMAL_CASE,,,
,,,,,,,,,"7
2 4 6 8 10 12 14
10",4,NORMAL_CASE,,,
,,,,,,,,,"7
2 4 6 8 10 12 14
15",-1,NORMAL_CASE,,,
,,,,,,,,,"9
1 1 1 1 1 1 1 1 1
1",0,NORMAL_CASE,,,
,,,,,,,,,"6
-1 0 1 2 3 4
2",3,NORMAL_CASE,,,
,,,,,,,,,"5
-2 -1 0 1 2
0",2,NORMAL_CASE,,,
,,,,,,,,,"10
10 20 30 40 50 60 70 80 90 100
50",4,NORMAL_CASE,,,
,,,,,,,,,"4
-100 -50 0 50
-50",1,NORMAL_CASE,,,
,,,,,,,,,"10
1 2 3 4 5 6 7 8 9 10
1",0,NORMAL_CASE,,,
,,,,,,,,,"5
100 200 300 400 500
500",4,NORMAL_CASE,,,
,,,,,,,,,"5
1 2 3 4 5
100",-1,NORMAL_CASE,,,
,,,,,,,,,"6
-10 -5 0 5 10 15
-10",0,NORMAL_CASE,,,
,,,,,,,,,,,,,,
