S. No,Difficulty,Question Content (in Markdown),Question_short_text,Sub_Topics,Code_language,Solution Code,Front_Code_language,Prefilled Code For Each Code Language,Test_case_input,Test_case_output,Test_case_type,Code_language,Backend Code,is_valid
1,EASY,"### Immediate Next Greater
Implement the function `immediate_next_greater` which will take a list of integers `numbers` along with its size `size` as arguments and returns an updated list, such that each number of the updated list will be the Immediate Next Greater (ING) for that number.

*Immediate Next Greater of `numbers[i]` will be the first `numbers[j]` such that:*

- *`numbers[i]` < `numbers[j]` and j > i*

*If there is no Immediate Next Greater for numbers[i], consider it as -1.*

*Note: You need not write code to handle input and output.*

---

#### Input Format

- First line consists of an integer `size`, representing the number of integers in `numbers`.
- Second line contains `size` space-separated integers representing the numbers in `numbers`.

---

#### Output Format

- Print `size` space-separated integers representing the immediate next greater number for each of the numbers in `numbers`.

---

#### Example
###### Input:
    6
    1 3 2 4 5 3
    
###### Output:
    3 4 4 5 -1 -1
    
###### Explanation
For the given array,

- The immediate next greater number for 1 is 3.
- The immediate next greater number for 3 is 4.
- The immediate next greater number for 2 is 4.
- The immediate next greater number for 4 is 5.
- There is no larger number for 5 and 3 on the right side. So we consider ING as -1.

---

#### Constraints

- 1 <=`size`<= 1000
- 0 <=`numbers[i]`<= 1000

---",Immediate Next Greater,DATA_TYPE_LIST,PYTHON,"def immediate_next_greater(size: int, numbers: list) -> list:
    result = [-1] * size
    for i in range(size):
        for j in range(i + 1, size):
            if numbers[i] < numbers[j]:
                result[i] = numbers[j]
                break
    return result
",PYTHON,"def immediate_next_greater(size: int, numbers: list) -> list:
    pass  # Replace pass with your code
",,,,PYTHON,"def main():
    size = int(input())
    numbers = list(map(int, input().strip().split()))
    result = immediate_next_greater(size, numbers)
    print(' '.join(map(str, result)))

if __name__ == ""__main__"":
    main()
",true
,,,,,JAVA,"import java.util.*;

public class Solution {
    public int[] immediate_next_greater(int size, int[] numbers) {
        int[] result = new int[size];
        for (int i = 0; i < size; i++) {
            int next_greater = -1;
            for (int j = i + 1; j < size; j++) {
                if (numbers[i] < numbers[j]) {
                    next_greater = numbers[j];
                    break;
                }
            }
            result[i] = next_greater;
        }
        return result;
    }
}
",JAVA,"public class Solution {
    public int[] immediate_next_greater(int size, int[] numbers) {
        
    }
}
","6
1 3 2 4 5 3",3 4 4 5 -1 -1,NORMAL_CASE,JAVA,"import java.util.*;

public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int size = scanner.nextInt();
        int[] numbers = new int[size];
        for (int i = 0; i < size; i++) {
            numbers[i] = scanner.nextInt();
        }
        Solution solution = new Solution();
        int[] result = solution.immediate_next_greater(size, numbers);
        for (int i = 0; i < size; i++) {
            System.out.print(result[i] + "" "");
        }
        System.out.println();
        scanner.close();
    }
}
",
,,,,,CPP,"#include <vector>
using namespace std;

vector<int> immediate_next_greater(int size, vector<int> numbers) {
    vector<int> result(size, -1);
    for (int i = 0; i < size; i++) {
        for (int j = i + 1; j < size; j++) {
            if (numbers[i] < numbers[j]) {
                result[i] = numbers[j];
                break;
            }
        }
    }
    return result;
}
",CPP,"#include <vector>
using namespace std;

vector<int> immediate_next_greater(int size, vector<int> numbers) {
    
}
","4
4 5 2 10",5 10 10 -1,NORMAL_CASE,CPP,"#include <iostream>
#include <vector>
#include ""solution.h""
using namespace std;

int main() {
    int size;
    cin >> size;
    vector<int> numbers(size);
    for (int i = 0; i < size; i++) {
        cin >> numbers[i];
    }
    vector<int> result = immediate_next_greater(size, numbers);
    for (int i = 0; i < size; i++) {
        cout << result[i] << "" "";
    }
    cout << endl;
    return 0;
}
",
,,,,,C,"#include <stdio.h>

void immediate_next_greater(int size, int numbers[], int result[]) {
    for (int i = 0; i < size; i++) {
        int next_greater = -1;
        for (int j = i + 1; j < size; j++) {
            if (numbers[i] < numbers[j]) {
                next_greater = numbers[j];
                break;
            }
        }
        result[i] = next_greater;
    }
}
",C,"#include <stdio.h>

void immediate_next_greater(int size, int numbers[], int result[]) {
    
}
","1
0",-1,EDGE_CASE,C,"#include <stdio.h>

#ifndef FILE1_H
#define FILE1_H
void immediate_next_greater(int, int[], int[]);
#endif

int main() {
    int size;
    scanf(""%d"", &size);
    int numbers[size];
    for (int i = 0; i < size; i++) {
        scanf(""%d"", &numbers[i]);
    }
    int result[size];
    immediate_next_greater(size, numbers, result);
    for (int i = 0; i < size; i++) {
        printf(""%d "", result[i]);
    }
    printf(""\n"");
    return 0;
}
",
,,,,,,,,,"2
8 10",10 -1,NORMAL_CASE,,,
,,,,,,,,,"5
6 4 3 2 1",-1 -1 -1 -1 -1,EDGE_CASE,,,
,,,,,,,,,"7
10 9 8 7 6 5 15",15 15 15 15 15 15 -1,NORMAL_CASE,,,
,,,,,,,,,"10
1 2 3 4 5 6 7 8 9 10",2 3 4 5 6 7 8 9 10 -1,NORMAL_CASE,,,
,,,,,,,,,"3
1000 500 200",-1 -1 -1,EDGE_CASE,,,
,,,,,,,,,"5
1 1 1 1 2",2 2 2 2 -1,NORMAL_CASE,,,
,,,,,,,,,"8
1000 999 998 997 996 995 994 1001",1001 1001 1001 1001 1001 1001 1001 -1,NORMAL_CASE,,,
,,,,,,,,,"6
1 1 1 2 2 3",2 2 2 3 3 -1,NORMAL_CASE,,,
,,,,,,,,,"9
0 1 2 3 4 5 6 7 8",1 2 3 4 5 6 7 8 -1,NORMAL_CASE,,,
,,,,,,,,,"4
10 10 10 10",-1 -1 -1 -1,EDGE_CASE,,,
,,,,,,,,,"5
3 3 3 3 3",-1 -1 -1 -1 -1,EDGE_CASE,,,
,,,,,,,,,"7
5 4 3 2 1 0 6",6 6 6 6 6 6 -1,NORMAL_CASE,,,
,,,,,,,,,"5
10 5 2 1 6",6 6 6 6 -1,NORMAL_CASE,,,
,,,,,,,,,"3
1000 1000 999",-1 -1 -1,EDGE_CASE,,,
,,,,,,,,,"4
9 8 7 6",-1 -1 -1 -1,EDGE_CASE,,,
,,,,,,,,,"5
1 6 2 5 3",6 -1 5 -1 -1,NORMAL_CASE,,,
,,,,,,,,,"6
1 3 2 4 6 5",3 4 4 6 -1 -1,NORMAL_CASE,,,
,,,,,,,,,"10
3 2 1 6 5 4 8 7 6 9",6 6 6 8 8 8 9 9 9 -1,NORMAL_CASE,,,
,,,,,,,,,"6
1 9 5 8 7 6",9 -1 8 -1 -1 -1,NORMAL_CASE,,,
,,,,,,,,,"5
5 4 3 2 1",-1 -1 -1 -1 -1,EDGE_CASE,,,
,,,,,,,,,"4
7 8 3 5",8 -1 5 -1,NORMAL_CASE,,,
,,,,,,,,,"5
10 9 4 2 7",-1 -1 7 7 -1,NORMAL_CASE,,,
,,,,,,,,,"7
4 5 2 7 8 1 9",5 7 7 8 9 9 -1,NORMAL_CASE,,,
,,,,,,,,,"6
3 1 2 7 6 5",7 2 7 -1 -1 -1,NORMAL_CASE,,,
,,,,,,,,,"3
10 20 30",20 30 -1,NORMAL_CASE,,,
,,,,,,,,,"1
999",-1,EDGE_CASE,,,
,,,,,,,,,"0
",,EDGE_CASE,,,
,,,,,,,,,,,,,,
2,EASY,"### Subsequent Larger Number
Create the function `subsequent_larger_number` which will take a list of integers `elements` along with its size `length` as arguments and returns an updated list, where each number in the updated list will be the Subsequent Larger Number (SLN) for that number.

*Subsequent Larger Number of `elements[i]` will be the first `elements[j]` such that:*

- *`elements[i]` < `elements[j]` and j > i*

*If there is no Subsequent Larger Number for elements[i], consider it as -1.*

*Note: You need not write code to handle input and output.*

---

#### Input Format

- First line consists of an integer `length`, indicating the number of integers in `elements`.
- Second line contains `length` space-separated integers representing the numbers in `elements`.

---

#### Output Format

- Print `length` space-separated integers representing the subsequent larger number for each of the numbers in `elements`.

---

#### Example
###### Input:
    4
    6 3 1 7
    
###### Output:
    7 7 7 -1
    
###### Explanation
For the given array,

- The subsequent larger number for 6 is 7.
- The subsequent larger number for 3 is 7.
- The subsequent larger number for 1 is 7.
- There is no larger number for 7 on the right side. So we consider SLN as -1.

---

#### Constraints

- 1 <=`length`<= 1000
- 0 <=`elements[i]`<= 1000

---",Subsequent Larger Number,DATA_TYPE_LIST,PYTHON,"def subsequent_larger_number(elements):
    length = len(elements)
    output = [-1] * length
    for i in range(length):
        for j in range(i + 1, length):
            if elements[i] < elements[j]:
                output[i] = elements[j]
                break
    return output
",PYTHON,"def subsequent_larger_number(elements):
    # Write your code here
    pass
",,,,PYTHON,"def main():
    length = int(input())
    elements = list(map(int, input().split()))
    result = subsequent_larger_number(elements)
    print(' '.join(map(str, result)))

if __name__ == ""__main__"":
    main()
",false
,,,,,JAVA,"public class Solution {
    public int[] subsequentLargerNumber(int length, int[] elements) {
        int[] output = new int[length];
        for (int i = 0; i < length; i++) {
            output[i] = -1;
            for (int j = i + 1; j < length; j++) {
                if (elements[i] < elements[j]) {
                    output[i] = elements[j];
                    break;
                }
            }
        }
        return output;
    }
}
",JAVA,"public class Solution {
    public int[] subsequentLargerNumber(int length, int[] elements) {
        // Write your code here
    }
}
","4
6 3 1 7",7 7 7 -1,NORMAL_CASE,JAVA,"import java.util.*;

public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int length = scanner.nextInt();
        int[] elements = new int[length];
        for (int i = 0; i < length; i++) {
            elements[i] = scanner.nextInt();
        }
        Solution solution = new Solution();
        int[] output = solution.subsequentLargerNumber(length, elements);
        for (int i = 0; i < length; i++) {
            System.out.print(output[i] + "" "");
        }
        System.out.println();
        scanner.close();
    }
}
",
,,,,,CPP,"#include <vector>
using namespace std;

vector<int> subsequent_larger_number(int length, vector<int>& elements) {
    vector<int> output(length, -1);
    for (int i = 0; i < length; ++i) {
        for (int j = i + 1; j < length; ++j) {
            if (elements[i] < elements[j]) {
                output[i] = elements[j];
                break;
            }
        }
    }
    return output;
}
",CPP,"#include <vector>
using namespace std;

vector<int> subsequent_larger_number(int length, vector<int>& elements) {
    // Write your code here
}
","3
2 5 1",5 -1 -1,NORMAL_CASE,CPP,"#include <iostream>
#include <vector>
#include ""solution.h""
using namespace std;

int main() {
    int length;
    cin >> length;
    vector<int> elements(length);
    for (int i = 0; i < length; i++) {
        cin >> elements[i];
    }
    vector<int> result = subsequent_larger_number(length, elements);
    for (int i = 0; i < length; i++) {
        cout << result[i] << "" "";
    }
    cout << endl;
    return 0;
}
",
,,,,,C,"#include <stdio.h>
#include <stdlib.h>

void subsequent_larger_number(int length, int elements[], int output[]) {
    for (int i = 0; i < length; i++) {
        output[i] = -1;
        for (int j = i + 1; j < length; j++) {
            if (elements[i] < elements[j]) {
                output[i] = elements[j];
                break;
            }
        }
    }
}
",C,"#include <stdio.h>
void subsequent_larger_number(int length, int elements[], int output[]) {
    
}
","5
1 2 3 4 5",2 3 4 5 -1,NORMAL_CASE,C,"#include <stdio.h>
#ifndef FILE1_H
#define FILE1_H
void subsequent_larger_number(int, int[], int[]);
#endif

int main() {
    int length;
    scanf(""%d"", &length);
    int elements[length];
    for (int i = 0; i < length; i++) {
        scanf(""%d"", &elements[i]);
    }
    int output[length];
    subsequent_larger_number(length, elements, output);
    for (int i = 0; i < length; i++) {
        printf(""%d "", output[i]);
    }
    printf(""\n"");
    return 0;
}",
,,,,,,,,,"5
5 4 3 2 1",-1 -1 -1 -1 -1,EDGE_CASE,,,
,,,,,,,,,"6
1 4 6 5 2 3",4 6 -1 -1 3 -1,NORMAL_CASE,,,
,,,,,,,,,"1
10",-1,EDGE_CASE,,,
,,,,,,,,,"7
7 1 5 3 6 4 2",-1 5 6 6 -1 -1 -1,NORMAL_CASE,,,
,,,,,,,,,"6
1000 999 998 997 996 1000",-1 -1 -1 -1 1000 -1,EDGE_CASE,,,
,,,,,,,,,"8
2 7 4 3 5 1 9 8",7 9 5 5 9 9 -1 -1,NORMAL_CASE,,,
,,,,,,,,,"10
10 9 8 7 6 5 4 3 2 1",-1 -1 -1 -1 -1 -1 -1 -1 -1 -1,EDGE_CASE,,,
,,,,,,,,,"5
1 1000 2 999 3",1000 -1 999 -1 -1,NORMAL_CASE,,,
,,,,,,,,,"3
0 0 0",-1 -1 -1,EDGE_CASE,,,
,,,,,,,,,"4
10 20 30 40",20 30 40 -1,NORMAL_CASE,,,
,,,,,,,,,"4
999 1000 500 1000",1000 -1 1000 -1,NORMAL_CASE,,,
,,,,,,,,,"15
1 2 3 5 4 3 2 1 9 8 7 6 5 4 3",2 3 5 9 9 9 9 9 -1 -1 -1 -1 -1 -1 -1,NORMAL_CASE,,,
,,,,,,,,,"5
2 2 2 2 2",-1 -1 -1 -1 -1,EDGE_CASE,,,
,,,,,,,,,"4
0 999 999 1000",999 1000 1000 -1,NORMAL_CASE,,,
,,,,,,,,,"6
500 1000 400 900 300 800",1000 -1 900 -1 800 -1,NORMAL_CASE,,,
,,,,,,,,,"10
1 2 3 4 5 6 7 8 9 10",2 3 4 5 6 7 8 9 10 -1,NORMAL_CASE,,,
,,,,,,,,,"10
10 9 8 7 6 5 4 3 2 1",-1 -1 -1 -1 -1 -1 -1 -1 -1 -1,EDGE_CASE,,,
,,,,,,,,,"6
1 1000 999 1000 998 999",1000 -1 1000 -1 999 -1,NORMAL_CASE,,,
,,,,,,,,,"4
5 5 5 5",-1 -1 -1 -1,EDGE_CASE,,,
,,,,,,,,,"5
1 4 2 4 3",4 -1 4 -1 -1,NORMAL_CASE,,,
,,,,,,,,,"4
1000 0 0 0",-1 -1 -1 -1,EDGE_CASE,,,
,,,,,,,,,"8
10 9 8 7 6 5 4 3",-1 -1 -1 -1 -1 -1 -1 -1,EDGE_CASE,,,
,,,,,,,,,"9
9 1 9 2 9 3 9 4 9",-1 9 -1 9 -1 9 -1 9 -1,NORMAL_CASE,,,
,,,,,,,,,"10
0 1 2 3 4 5 6 7 8 9",1 2 3 4 5 6 7 8 9 -1,NORMAL_CASE,,,
,,,,,,,,,"3
999 999 999",-1 -1 -1,EDGE_CASE,,,
,,,,,,,,,"2
0 10",10 -1,NORMAL_CASE,,,
,,,,,,,,,"10
1 2 3 4 5 6 7 8 9 1000",2 3 4 5 6 7 8 9 1000 -1,NORMAL_CASE,,,
,,,,,,,,,,,,,,
3,EASY,"### Future Greater Element
Design the function `future_greater_element` which takes a list of integers `arr` and its size `length` as arguments, and produces an updated list such that each number in the updated list will be the Future Greater Element (FGE) for that number.

*Future Greater Element of `arr[i]` will be the first `arr[j]` such that:*

- *`arr[i]` < `arr[j]` and j > i*

*If there is no Future Greater Element for arr[i], consider it as -1.*

*Note: You need not write code to handle input and output.*

---

#### Input Format

- First line consists of an integer `length`, indicating the number of integers in `arr`.
- Second line contains `length` space-separated integers representing the numbers in `arr`.

---

#### Output Format

- Print `length` space-separated integers representing the future greater element for each of the numbers in `arr`.

---

#### Example
###### Input:
    5
    2 1 3 6 5
    
###### Output:
    3 3 6 -1 -1
    
###### Explanation
For the given array,

- The future greater element for 2 is 3.
- The future greater element for 1 is 3.
- The future greater element for 3 is 6.
- There is no larger number for 6 and 5 on the right side. So we consider FGE as -1.

---

#### Constraints

- 1 <=`length`<= 1000
- 0 <=`arr[i]`<= 1000

---",Future Greater Element,DATA_TYPE_LIST,PYTHON,"def future_greater_element(arr, length):
    result = [-1] * length
    for i in range(length):
        for j in range(i + 1, length):
            if arr[j] > arr[i]:
                result[i] = arr[j]
                break
    return result
",PYTHON,"def future_greater_element(arr, length):
    # Write your code here
    pass
",,,,PYTHON,"def main():
    length = int(input())
    arr = list(map(int, input().split()))
    result = future_greater_element(arr, length)
    print(' '.join(map(str, result)))

if __name__ == ""__main__"":
    main()
",true
,,,,,JAVA,"public class Solution {
    public void future_greater_element(int[] arr, int length, int[] result) {
        for (int i = 0; i < length; i++) {
            result[i] = -1;
            for (int j = i + 1; j < length; j++) {
                if (arr[j] > arr[i]) {
                    result[i] = arr[j];
                    break;
                }
            }
        }
    }
}
",JAVA,"public class Solution {
    public void future_greater_element(int[] arr, int length, int[] result) {
        // Write your code here
    }
}
","5
2 1 3 6 5",3 3 6 -1 -1,NORMAL_CASE,JAVA,"import java.util.*;

public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int length = scanner.nextInt();
        int[] arr = new int[length];
        for (int i = 0; i < length; i++) {
            arr[i] = scanner.nextInt();
        }
        int[] result = new int[length];
        Solution solution = new Solution();
        solution.future_greater_element(arr, length, result);
        for (int i = 0; i < length; i++) {
            System.out.print(result[i] + "" "");
        }
        System.out.println();
        scanner.close();
    }
}
",
,,,,,CPP,"#include <vector>

void future_greater_element(const std::vector<int>& arr, int length, std::vector<int>& result) {
    for (int i = 0; i < length; i++) {
        result[i] = -1;
        for (int j = i + 1; j < length; j++) {
            if (arr[j] > arr[i]) {
                result[i] = arr[j];
                break;
            }
        }
    }
}
",CPP,"#include <vector>

void future_greater_element(const std::vector<int>& arr, int length, std::vector<int>& result) {
    // Write your code here
}
","3
1 2 3",2 3 -1,NORMAL_CASE,CPP,"#include <iostream>
#include <vector>
#include ""solution.h""
using namespace std;

int main() {
    int length;
    cin >> length;
    vector<int> arr(length);
    for (int i = 0; i < length; i++) {
        cin >> arr[i];
    }
    vector<int> result(length);
    future_greater_element(arr, length, result);
    for (int i = 0; i < length; i++) {
        cout << result[i] << "" "";
    }
    cout << endl;
    return 0;
}
",
,,,,,C,"#include <stdio.h>

void future_greater_element(int arr[], int length, int result[]) {
    for (int i = 0; i < length; i++) {
        result[i] = -1;
        for (int j = i + 1; j < length; j++) {
            if (arr[j] > arr[i]) {
                result[i] = arr[j];
                break;
            }
        }
    }
}
",C,"#include <stdio.h>

void future_greater_element(int arr[], int length, int result[]) {
    // Write your code here
}
","1
5",-1,EDGE_CASE,C,"#include <stdio.h>

#ifndef FILE1_H
#define FILE1_H
void future_greater_element(int arr[], int length, int result[]);
#endif

int main() {
    int length;
    scanf(""%d"", &length);
    int arr[length];
    for (int i = 0; i < length; i++) {
        scanf(""%d"", &arr[i]);
    }
    int result[length];
    future_greater_element(arr, length, result);
    for (int i = 0; i < length; i++) {
        printf(""%d "", result[i]);
    }
    printf(""\n"");
    return 0;
}
",
,,,,,,,,,"4
4 3 2 1",-1 -1 -1 -1,EDGE_CASE,,,
,,,,,,,,,"6
5 4 3 2 1 6",6 6 6 6 6 -1,NORMAL_CASE,,,
,,,,,,,,,"6
1 2 3 4 5 0",2 3 4 5 -1 -1,NORMAL_CASE,,,
,,,,,,,,,"5
0 0 0 0 0",-1 -1 -1 -1 -1,EDGE_CASE,,,
,,,,,,,,,"5
1 3 2 4 2",3 4 4 -1 -1,NORMAL_CASE,,,
,,,,,,,,,"7
7 5 3 2 4 1 6",-1 6 4 4 6 6 -1,NORMAL_CASE,,,
,,,,,,,,,"4
5 6 7 8",6 7 8 -1,NORMAL_CASE,,,
,,,,,,,,,"2
9 2",-1 -1,EDGE_CASE,,,
,,,,,,,,,"3
3 2 1",-1 -1 -1,EDGE_CASE,,,
,,,,,,,,,"10
10 9 8 7 6 5 4 3 2 1",-1 -1 -1 -1 -1 -1 -1 -1 -1 -1,EDGE_CASE,,,
,,,,,,,,,"5
11 22 33 44 55",22 33 44 55 -1,NORMAL_CASE,,,
,,,,,,,,,"5
3 3 3 3 3",-1 -1 -1 -1 -1,EDGE_CASE,,,
,,,,,,,,,"4
1 2 3 0",2 3 -1 -1,NORMAL_CASE,,,
,,,,,,,,,"8
1 2 3 4 5 6 7 8",2 3 4 5 6 7 8 -1,NORMAL_CASE,,,
,,,,,,,,,"8
8 7 6 5 4 3 2 1",-1 -1 -1 -1 -1 -1 -1 -1,EDGE_CASE,,,
,,,,,,,,,"6
6 5 4 3 2 1",-1 -1 -1 -1 -1 -1,EDGE_CASE,,,
,,,,,,,,,"6
1 5 5 5 5 10",5 10 10 10 10 -1,NORMAL_CASE,,,
,,,,,,,,,"5
1 3 2 5 0",3 5 5 -1 -1,NORMAL_CASE,,,
,,,,,,,,,"6
1 2 3 4 5 0",2 3 4 5 -1 -1,NORMAL_CASE,,,
,,,,,,,,,"10
10 9 8 7 6 5 4 3 2 1",-1 -1 -1 -1 -1 -1 -1 -1 -1 -1,EDGE_CASE,,,
,,,,,,,,,"8
4 2 3 1 6 1 2 5",6 3 6 6 -1 2 5 -1,NORMAL_CASE,,,
,,,,,,,,,"8
1 5 2 1 7 3 1 4",5 7 7 7 -1 4 4 -1,NORMAL_CASE,,,
,,,,,,,,,"7
1 1 1 1 1 1 1",-1 -1 -1 -1 -1 -1 -1,EDGE_CASE,,,
,,,,,,,,,"10
1 2 1 2 1 2 1 2 1 2",2 -1 2 -1 2 -1 2 -1 2 -1,NORMAL_CASE,,,
,,,,,,,,,"5
1 4 3 7 2",4 7 7 -1 -1,NORMAL_CASE,,,
,,,,,,,,,"4
5 1 6 2",6 6 -1 -1,NORMAL_CASE,,,
,,,,,,,,,"6
3 2 1 4 5 0",4 4 4 5 -1 -1,NORMAL_CASE,,,
,,,,,,,,,,,,,,
4,EASY,"### Next Greater Element
Define the function `next_greater_element` which takes a list of integers `nums` and its size `n` as arguments, and returns an updated list such that each number in the updated list will be the Next Greater Element (NGE) for that number.

*Next Greater Element of `nums[i]` will be the first `nums[j]` such that:*

- *`nums[i]` < `nums[j]` and j > i*

*If there is no Next Greater Element for nums[i], consider it as -1.*

*Note: You need not write code to handle input and output.*

---

#### Input Format

- First line consists of an integer `n`, indicating the number of integers in `nums`.
- Second line contains `n` space-separated integers representing the numbers in `nums`.

---

#### Output Format

- Print `n` space-separated integers representing the next greater element for each of the numbers in `nums`.

---

#### Example
###### Input:
    3
    7 8 5
    
###### Output:
    8 -1 -1
    
###### Explanation
For the given array,

- The next greater element for 7 is 8.
- There is no larger number for 8 and 5 on the right side. So we consider NGE as -1.

---

#### Constraints

- 1 <=`n`<= 1000
- 0 <=`nums[i]`<= 1000

---",Next Greater Element,DATA_TYPE_LIST,PYTHON,"from typing import List

def next_greater_element(nums: List[int]) -> List[int]:
    n = len(nums)
    result = [-1] * n
    for i in range(n):
        for j in range(i + 1, n):
            if nums[j] > nums[i]:
                result[i] = nums[j]
                break
    return result
",PYTHON,"from typing import List

def next_greater_element(nums: List[int]) -> List[int]:
    pass",,,,PYTHON,"import sys
from solution import *

def main():
    n = int(input())
    nums = list(map(int, input().split()))
    result = next_greater_element(nums)
    print(' '.join(map(str, result)))

if __name__ == '__main__':
    main()",true
,,,,,JAVA,"import java.util.List;
import java.util.ArrayList;

public class Solution {
    public List<Integer> next_greater_element(List<Integer> nums) {
        int n = nums.size();
        List<Integer> result = new ArrayList<>();
        for (int i = 0; i < n; ++i) {
            result.add(-1);
            for (int j = i + 1; j < n; ++j) {
                if (nums.get(j) > nums.get(i)) {
                    result.set(i, nums.get(j));
                    break;
                }
            }
        }
        return result;
    }
}",JAVA,"import java.util.List;
import java.util.ArrayList;

public class Solution {
    public List<Integer> next_greater_element(List<Integer> nums) {
        return new ArrayList<>();
    }
}","3
7 8 5",8 -1 -1,NORMAL_CASE,JAVA,"import java.util.*;

public class Main {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        List<Integer> nums = new ArrayList<>();
        for (int i = 0; i < n; ++i) {
            nums.add(sc.nextInt());
        }
        Solution solution = new Solution();
        List<Integer> result = solution.next_greater_element(nums);
        for (int num : result) {
            System.out.print(num + "" "");
        }
        System.out.println();
        sc.close();
    }
}",
,,,,,CPP,"#include <vector>

std::vector<int> next_greater_element(const std::vector<int>& nums) {
    int n = nums.size();
    std::vector<int> result(n, -1);
    for (int i = 0; i < n; ++i) {
        for (int j = i + 1; j < n; ++j) {
            if (nums[j] > nums[i]) {
                result[i] = nums[j];
                break;
            }
        }
    }
    return result;
}",CPP,"#include <vector>

std::vector<int> next_greater_element(const std::vector<int>& nums) {
    return {};
}","4
1 3 2 4",3 4 4 -1,NORMAL_CASE,CPP,"#include <iostream>
#include <vector>
#include ""solution.h""

int main() {
    int n;
    std::cin >> n;
    std::vector<int> nums(n);
    for (int i = 0; i < n; ++i) {
        std::cin >> nums[i];
    }
    std::vector<int> result = next_greater_element(nums);
    for (int num : result) {
        std::cout << num << "" "";
    }
    std::cout << std::endl;
    return 0;
}",
,,,,,C,"#include <stdio.h>
#include <stdlib.h>

int* next_greater_element(int* nums, int n) {
    int* result = (int*)malloc(n * sizeof(int));
    for (int i = 0; i < n; ++i) {
        result[i] = -1; // Default value is -1
        for (int j = i + 1; j < n; ++j) {
            if (nums[j] > nums[i]) {
                result[i] = nums[j];
                break;
            }
        }
    }
    return result;
}",C,"#include <stdio.h>
#include <stdlib.h>

int* next_greater_element(int* nums, int n) {
        
    }","1
10",-1,EDGE_CASE,C,"#include <stdio.h>
#include ""solution.h""

#ifndef FILE1_H
#define FILE1_H
int* next_greater_element(int*, int);
#endif

int main() {
    int n;
    scanf(""%d"", &n);
    int nums[n];
    for (int i = 0; i < n; ++i) {
        scanf(""%d"", &nums[i]);
    }
    int* result = next_greater_element(nums, n);
    for (int i = 0; i < n; ++i) {
        printf(""%d "", result[i]);
    }
    printf(""\n"");
    free(result);
    return 0;
}",
,,,,,,,,,"5
5 3 8 6 7",8 8 -1 7 -1,NORMAL_CASE,,,
,,,,,,,,,"5
2 1 3 5 4",3 3 5 -1 -1,NORMAL_CASE,,,
,,,,,,,,,"3
4 6 2",6 -1 -1,NORMAL_CASE,,,
,,,,,,,,,"6
10 20 30 40 50 60",20 30 40 50 60 -1,NORMAL_CASE,,,
,,,,,,,,,"4
100 90 80 70",-1 -1 -1 -1,NORMAL_CASE,,,
,,,,,,,,,"6
3 2 1 4 6 5",4 4 4 6 -1 -1,NORMAL_CASE,,,
,,,,,,,,,"3
0 0 0",-1 -1 -1,NORMAL_CASE,,,
,,,,,,,,,"2
1 1000",1000 -1,NORMAL_CASE,,,
,,,,,,,,,"5
999 998 997 996 1000",1000 1000 1000 1000 -1,EDGE_CASE,,,
,,,,,,,,,"5
999 1000 1000 999 1000",1000 -1 -1 1000 -1,NORMAL_CASE,,,
,,,,,,,,,"5
10 20 30 0 40",20 30 40 40 -1,NORMAL_CASE,,,
,,,,,,,,,"5
100 1 200 2 300",200 200 300 300 -1,NORMAL_CASE,,,
,,,,,,,,,"7
7 1 5 3 6 4 2",-1 5 6 6 -1 -1 -1,NORMAL_CASE,,,
,,,,,,,,,"3
1000 1000 1000",-1 -1 -1,NORMAL_CASE,,,
,,,,,,,,,"10
0 1 2 3 4 5 6 7 8 9",1 2 3 4 5 6 7 8 9 -1,NORMAL_CASE,,,
,,,,,,,,,"4
9 8 7 6",-1 -1 -1 -1,NORMAL_CASE,,,
,,,,,,,,,"8
6 8 0 1 3 9 5 4",8 9 1 3 9 -1 -1 -1,NORMAL_CASE,,,
,,,,,,,,,"6
1 1 1 1 1 1",-1 -1 -1 -1 -1 -1,NORMAL_CASE,,,
,,,,,,,,,"6
4 5 6 7 8 9",5 6 7 8 9 -1,NORMAL_CASE,,,
,,,,,,,,,"2
1000 0",-1 -1,EDGE_CASE,,,
,,,,,,,,,"4
0 0 0 0",-1 -1 -1 -1,NORMAL_CASE,,,
,,,,,,,,,"5
2 2 2 2 2",-1 -1 -1 -1 -1,NORMAL_CASE,,,
,,,,,,,,,"7
10 20 30 40 50 60 70",20 30 40 50 60 70 -1,NORMAL_CASE,,,
,,,,,,,,,"9
100 90 10 80 40 70 20 60 30",-1 80 80 -1 70 -1 60 -1 -1,NORMAL_CASE,,,
,,,,,,,,,"3
100 50 150",150 150 -1,NORMAL_CASE,,,
,,,,,,,,,"5
5 4 3 2 1",-1 -1 -1 -1 -1,NORMAL_CASE,,,
,,,,,,,,,"8
7 4 3 2 1 6 5 8",8 6 6 6 6 8 8 -1,NORMAL_CASE,,,
,,,,,,,,,,,,,,
5,EASY,"### Immediate Larger Value
Create the function `immediate_larger_value` which takes a list of integers `values` and its size `num` as arguments, and returns an updated list such that each number in the updated list will be the Immediate Larger Value (ILV) for that number.

*Immediate Larger Value of `values[i]` will be the first `values[j]` such that:*

- *`values[i]` < `values[j]` and j > i*

*If there is no Immediate Larger Value for values[i], consider it as -1.*

*Note: You need not write code to handle input and output.*

---

#### Input Format

- First line consists of an integer `num`, representing the number of integers in `values`.
- Second line contains `num` space-separated integers representing the numbers in `values`.

---

#### Output Format

- Print `num` space-separated integers representing the immediate larger value for each of the numbers in `values`.

---

#### Example
###### Input:
    5
    9 1 7 3 2
    
###### Output:
    -1 7 -1 -1 -1
    
###### Explanation
For the given array,

- The immediate larger value for 9 is -1.
- The immediate larger value for 1 is 7.
- The immediate larger value for 7 is -1.
- The immediate larger value for 3 is -1.
- The immediate larger value for 2 is -1.

---

#### Constraints

- 1 <= `num` <= 1000
- 0 <= `values[i]` <= 1000

---",Immediate Larger Value,DATA_TYPE_LIST,PYTHON,"def immediate_larger_value(values):
    num = len(values)
    result = [-1] * num
    for i in range(num):
        for j in range(i + 1, num):
            if values[i] < values[j]:
                result[i] = values[j]
                break
    return result
",PYTHON,"def immediate_larger_value(values):
    # Write your code here
    return []
",,,,PYTHON,"def main():
    num = int(input())
    values = list(map(int, input().strip().split()))
    result = immediate_larger_value(values)
    print(' '.join(map(str, result)))

if __name__ == ""__main__"":
    main()
",true
,,,,,JAVA,"import java.util.*;

public class Solution {
    public static int[] immediateLargerValue(int[] values) {
        int num = values.length;
        int[] result = new int[num];
        Arrays.fill(result, -1);
        for (int i = 0; i < num; i++) {
            for (int j = i + 1; j < num; j++) {
                if (values[i] < values[j]) {
                    result[i] = values[j];
                    break;
                }
            }
        }
        return result;
    }
}
",JAVA,"public class Solution {
    public static int[] immediateLargerValue(int[] values) {
        // Write your code here
        return new int[0];
    }
}
","5
9 1 7 3 2",-1 7 -1 -1 -1,NORMAL_CASE,JAVA,"import java.util.*;

public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int num = scanner.nextInt();
        int[] values = new int[num];
        for (int i = 0; i < num; i++) {
            values[i] = scanner.nextInt();
        }
        scanner.close();
        Solution solution = new Solution();
        int[] result = solution.immediateLargerValue(values);
        for (int value : result) {
            System.out.print(value + "" "");
        }
        System.out.println();
    }
}
",
,,,,,CPP,"#include <vector>
#include <iostream>
using namespace std;

vector<int> immediate_larger_value(vector<int>& values) {
    int num = values.size();
    vector<int> result(num, -1);
    for (int i = 0; i < num; i++) {
        for (int j = i + 1; j < num; j++) {
            if (values[i] < values[j]) {
                result[i] = values[j];
                break;
            }
        }
    }
    return result;
}
",CPP,"#include <vector>
using namespace std;

vector<int> immediate_larger_value(vector<int>& values) {
    // Write your code here
    return vector<int>();
}
","3
4 5 6",5 6 -1,NORMAL_CASE,CPP,"#include <bits/stdc++.h>
using namespace std;

#ifndef SOLUTION_H
#define SOLUTION_H
vector<int> immediate_larger_value(vector<int>& values);
#endif

int main() {
    int num;
    cin >> num;
    vector<int> values(num);
    for (int i = 0; i < num; i++) {
        cin >> values[i];
    }
    vector<int> result = immediate_larger_value(values);
    for (int i = 0; i < num; i++) {
        cout << result[i] << "" "";
    }
    cout << endl;
    return 0;
}
",
,,,,,C,"#include <stdio.h>

void immediate_larger_value(int values[], int num, int result[]) {
    for (int i = 0; i < num; i++) {
        int found = 0;
        for (int j = i + 1; j < num; j++) {
            if (values[i] < values[j]) {
                result[i] = values[j];
                found = 1;
                break;
            }
        }
        if (!found) {
            result[i] = -1;
        }
    }
}
",C,"#include <stdio.h>

void immediate_larger_value(int values[], int num, int result[]);

void immediate_larger_value(int values[], int num, int result[]) {
    // Write your code here
}
","1
0",-1,EDGE_CASE,C,"#include <stdio.h>

#ifndef FILE1_H
#define FILE1_H
void immediate_larger_value(int values[], int num, int result[]);
#endif

int main() {
    int num;
    scanf(""%d"", &num);
    int values[num];
    for (int i = 0; i < num; i++) {
        scanf(""%d"", &values[i]);
    }
    int result[num];
    immediate_larger_value(values, num, result);
    for (int i = 0; i < num; i++) {
        printf(""%d "", result[i]);
    }
    printf(""\n"");
    return 0;
}",
,,,,,,,,,"2
10 20",20 -1,NORMAL_CASE,,,
,,,,,,,,,"2
20 10",-1 -1,NORMAL_CASE,,,
,,,,,,,,,"6
10 5 8 3 6 2",-1 8 -1 6 -1 -1,NORMAL_CASE,,,
,,,,,,,,,"5
1000 998 999 500 100",-1 999 -1 -1 -1,EDGE_CASE,,,
,,,,,,,,,"10
1 2 3 4 5 6 7 8 9 10",2 3 4 5 6 7 8 9 10 -1,NORMAL_CASE,,,
,,,,,,,,,"9
9 8 7 6 5 4 3 2 1",-1 -1 -1 -1 -1 -1 -1 -1 -1,NORMAL_CASE,,,
,,,,,,,,,"8
1 3 2 5 4 7 6 8",3 5 5 7 7 8 8 -1,NORMAL_CASE,,,
,,,,,,,,,"7
13 6 9 12 7 10 8",-1 9 12 -1 10 -1 -1,NORMAL_CASE,,,
,,,,,,,,,"4
40 50 20 30",50 -1 30 -1,NORMAL_CASE,,,
,,,,,,,,,"6
20 21 19 22 18 23",21 22 22 23 23 -1,NORMAL_CASE,,,
,,,,,,,,,"10
100 200 300 200 100 300 400 100 200 300",200 300 400 300 300 400 -1 200 300 -1,NORMAL_CASE,,,
,,,,,,,,,"12
10 20 30 40 50 60 70 80 90 100 110 120",20 30 40 50 60 70 80 90 100 110 120 -1,NORMAL_CASE,,,
,,,,,,,,,"11
34 23 15 78 33 45 67 89 43 65 87",78 78 78 -1 45 67 89 -1 65 87 -1,NORMAL_CASE,,,
,,,,,,,,,"9
5 10 6 12 8 15 7 17 9",10 12 12 15 15 17 17 -1 -1,NORMAL_CASE,,,
,,,,,,,,,"8
3 12 5 18 9 21 10 24",12 18 18 21 21 24 24 -1,NORMAL_CASE,,,
,,,,,,,,,"7
19 11 25 13 22 14 18",25 25 -1 22 -1 18 -1,NORMAL_CASE,,,
,,,,,,,,,"10
90 45 60 23 30 50 70 20 40 35",-1 60 70 30 50 70 -1 40 -1 -1,NORMAL_CASE,,,
,,,,,,,,,"5
30 60 10 40 20",60 -1 40 -1 -1,NORMAL_CASE,,,
,,,,,,,,,"3
1 10 100",10 100 -1,NORMAL_CASE,,,
,,,,,,,,,"10
2 4 8 16 32 64 128 256 512 1024",4 8 16 32 64 128 256 512 1024 -1,NORMAL_CASE,,,
,,,,,,,,,"5
500 100 200 400 300",-1 200 400 -1 -1,NORMAL_CASE,,,
,,,,,,,,,"7
15 12 16 10 14 18 13",16 16 18 14 18 -1 -1,NORMAL_CASE,,,
,,,,,,,,,"8
20 25 22 27 23 29 24 30",25 27 27 29 29 30 30 -1,NORMAL_CASE,,,
,,,,,,,,,"6
8 14 18 20 10 24",14 18 20 24 24 -1,NORMAL_CASE,,,
,,,,,,,,,"9
1 3 2 4 5 6 7 9 8",3 4 4 5 6 7 9 -1 -1,NORMAL_CASE,,,
,,,,,,,,,"12
20 18 16 14 12 10 8 6 4 2 0 22",22 22 22 22 22 22 22 22 22 22 22 -1,NORMAL_CASE,,,
,,,,,,,,,"5
99 1 99 1 100",100 99 100 100 -1,NORMAL_CASE,,,
,,,,,,,,,,,,,,
