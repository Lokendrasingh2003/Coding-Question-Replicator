S. No,Difficulty,Question Content (in Markdown),Question_short_text,Sub_Topics,Code_language,Solution Code,Front_Code_language,Prefilled Code For Each Code Language,Test_case_input,Test_case_output,Test_case_type,Code_language,Backend Code,is_valid
1,EASY,"### House Number Clean-Up

In the peaceful village of Digiville, houses are uniquely numbered for easy identification. However, one day, a newcomer noticed some houses had duplicate numbers, causing confusion among the residents. They decided to enlist your help to correct this situation. Given a list `arr` of house numbers, your task is to remove the duplicate numbers and provide the villagers with a unique list of house numbers in <HighlightedText>increasing order</HighlightedText>.

---

#### Input Format
The input consists of:

- `n`-> number of houses in the list `arr`.
- `arr` -> `n` space-separated integers representing house numbers in Digiville.

#### Output Format
- A list of unique house numbers.

---

#### Constraints
- 1 <=`n`<= 10^5
- The house numbers list `arr` consists only of Positive Integers.

---

#### Example
###### Input
    10
    1 3 4 2 2 5 1 6 4 7

###### Output
    1 2 3 4 5 6 7

---

#### Explanation
In the given example, the input list is `[1, 3, 4, 2, 2, 5, 1, 6, 4, 7]`. By removing duplicates and sorting the numbers, we get the output list `[1, 2, 3, 4, 5, 6, 7]`.
",House Number Clean-Up,DATA_TYPE_LIST,PYTHON,"n = int(input())
arr = list(map(int, input().split()))
unique_arr = sorted(set(arr))
print(*unique_arr)
",PYTHON,"# Write your code here
",,,,,,true
,,,,,JAVA,"import java.util.*;

public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] arr = new int[n];
        for (int i = 0; i < n; i++) {
            arr[i] = scanner.nextInt();
        }
        
        Arrays.sort(arr);
        
        System.out.print(arr[0] + "" "");
        for (int i = 1; i < n; i++) {
            if (arr[i] != arr[i-1]) {
                System.out.print(arr[i] + "" "");
            }
        }
        System.out.println();
        
        scanner.close();
    }
}
",JAVA,"import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        // Write your code here
    }
}","10
1 3 4 2 2 5 1 6 4 7",1 2 3 4 5 6 7,NORMAL_CASE,,,
,,,,,CPP,"#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

int main() {
    int n;
    cin >> n;
    vector<int> arr(n);
    for (int i = 0; i < n; ++i) {
        cin >> arr[i];
    }
    
    sort(arr.begin(), arr.end());
    
    cout << arr[0] << "" "";
    for (int i = 1; i < n; ++i) {
        if (arr[i] != arr[i-1]) {
            cout << arr[i] << "" "";
        }
    }
    cout << endl;
    
    return 0;
}
",CPP,"#include <bits/stdc++.h>
using namespace std;

int main() {
    // Write your code here
    return 0;
}","5
5 3 2 3 5",2 3 5,NORMAL_CASE,,,
,,,,,C,"#include <stdio.h>
#include <stdlib.h>

int compare(const void *a, const void *b) {
    return (*(int*)a - *(int*)b);
}

int main() {
    int n;
    scanf(""%d"", &n);
    int arr[n];
    for (int i = 0; i < n; i++) {
        scanf(""%d"", &arr[i]);
    }
    
    qsort(arr, n, sizeof(int), compare);
    
    printf(""%d "", arr[0]);
    for (int i = 1; i < n; i++) {
        if (arr[i] != arr[i-1]) {
            printf(""%d "", arr[i]);
        }
    }
    printf(""\n"");
    return 0;
}
",C,"#include <stdio.h>

int main() {
    // Write your code here
    return 0;
}","1
1",1,EDGE_CASE,,,
,,,,,,,,,"3
2 2 2",2,EDGE_CASE,,,
,,,,,,,,,"5
5 4 3 2 1",1 2 3 4 5,NORMAL_CASE,,,
,,,,,,,,,"5
1 2 3 4 5",1 2 3 4 5,NORMAL_CASE,,,
,,,,,,,,,"3
3 2 3",2 3,NORMAL_CASE,,,
,,,,,,,,,"6
6 5 4 3 2 1",1 2 3 4 5 6,NORMAL_CASE,,,
,,,,,,,,,"8
8 7 7 6 5 4 3 2",2 3 4 5 6 7 8,NORMAL_CASE,,,
,,,,,,,,,"4
9 9 8 7",7 8 9,NORMAL_CASE,,,
,,,,,,,,,"10
10 9 8 7 6 5 4 3 2 1",1 2 3 4 5 6 7 8 9 10,NORMAL_CASE,,,
,,,,,,,,,"7
1 9 8 7 6 10 10",1 6 7 8 9 10,NORMAL_CASE,,,
,,,,,,,,,"5
3 3 3 3 3",3,NORMAL_CASE,,,
,,,,,,,,,"6
1 1 2 2 3 3",1 2 3,NORMAL_CASE,,,
,,,,,,,,,"0
",,EDGE_CASE,,,
,,,,,,,,,"10
8 8 7 7 6 6 5 5 4 4",4 5 6 7 8,NORMAL_CASE,,,
,,,,,,,,,"15
2 4 6 8 2 4 6 8 10 10 15 16 15 16 20",2 4 6 8 10 15 16 20,NORMAL_CASE,,,
,,,,,,,,,"7
31 33 35 37 38 32 36",31 32 33 35 36 37 38,NORMAL_CASE,,,
,,,,,,,,,"9
44 45 46 47 48 48 47 46 45",44 45 46 47 48,NORMAL_CASE,,,
,,,,,,,,,"4
100 99 98 97",97 98 99 100,NORMAL_CASE,,,
,,,,,,,,,"10
1 1 2 2 3 3 4 4 5 5",1 2 3 4 5,NORMAL_CASE,,,
,,,,,,,,,"10
50 40 30 20 10 50 40 30 20 10",10 20 30 40 50,NORMAL_CASE,,,
,,,,,,,,,"8
1000 900 800 700 600 500 400 300",300 400 500 600 700 800 900 1000,NORMAL_CASE,,,
,,,,,,,,,"6
102 98 102 98 96 96",96 98 102,NORMAL_CASE,,,
,,,,,,,,,"7
15 25 35 45 55 65 75",15 25 35 45 55 65 75,NORMAL_CASE,,,
,,,,,,,,,"11
77 77 99 99 88 88 66 66 55 55 44",44 55 66 77 88 99,NORMAL_CASE,,,
,,,,,,,,,"5
73 74 75 76 77",73 74 75 76 77,NORMAL_CASE,,,
,,,,,,,,,"4
222 444 666 888",222 444 666 888,NORMAL_CASE,,,
,,,,,,,,,"9
12 34 56 78 90 12 34 56 78",12 34 56 78 90,NORMAL_CASE,,,
,,,,,,,,,"6
2 4 8 16 32 64",2 4 8 16 32 64,NORMAL_CASE,,,
,,,,,,,,,,,,,,
2,EASY,"### Unique House Numbers

In the town of Uniqueville, each house must have a distinct number. Recently, a visitor observed that some houses had repeating numbers, leaving spectators baffled. They requested your help to reassess these numbers. Given a list `arr` of house numbers, remove any repeated numbers and list the unique numbers in <HighlightedText>increasing order</HighlightedText>.

---

#### Input Format
The input consists of:

- `n`-> number of houses in the list `arr`.
- `arr` -> `n` space-separated integers representing house numbers in Uniqueville.

#### Output Format
- A list of unique house numbers.

---

#### Constraints
- 1 <=`n`<= 10^5
- The house numbers list `arr` consists only of Positive Integers.

---

#### Example
###### Input
    5
    8 8 3 6 3

###### Output
    3 6 8

---

#### Explanation
In the given example, the input list contains `[8, 8, 3, 6, 3]`. After removing duplicates and sorting, the output is `[3, 6, 8]`.
",Unique House Numbers,DATA_TYPE_LIST,PYTHON,"n = int(input())
arr = list(map(int, input().split()))
unique_numbers = sorted(set(arr))
print("" "".join(map(str, unique_numbers)))
",PYTHON,"# Write your code here
",,,,,,true
,,,,,JAVA,"import java.util.*;

public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] arr = new int[n];
        for(int i = 0; i < n; i++) {
            arr[i] = scanner.nextInt();
        }
        
        Set<Integer> uniqueNumbers = new TreeSet<>();
        for(int num : arr) {
            uniqueNumbers.add(num);
        }
        
        for(int num : uniqueNumbers) {
            System.out.print(num + "" "");
        }
        System.out.println();
        
        scanner.close();
    }
}
",JAVA,"import java.util.*;

public class Main {
    public static void main(String[] args) {
        // Write your code here
    }
}
","5
8 8 3 6 3",3 6 8,NORMAL_CASE,,,
,,,,,CPP,"#include <iostream>
#include <set>
#include <vector>
using namespace std;

int main() {
    int n;
    cin >> n;
    vector<int> arr(n);
    for(int i = 0; i < n; i++) {
        cin >> arr[i];
    }
    
    set<int> unique_numbers(arr.begin(), arr.end());
    for(int num : unique_numbers) {
        cout << num << "" "";
    }
    cout << endl;
    
    return 0;
}
",CPP,"#include <bits/stdc++.h>
using namespace std;

int main() {
    // Write your code here
    return 0;
}","3
1 2 1",1 2,NORMAL_CASE,,,
,,,,,C,"#include <stdio.h>
int main() {
    int n;
    scanf(""%d"", &n);
    int arr[n];
    for(int i = 0; i < n; i++) {
        scanf(""%d"", &arr[i]);
    }
    
    int count[100001] = {0};
    for(int i = 0; i < n; i++) {
        count[arr[i]]++;
    }
    for(int i = 0; i < 100001; i++) {
        if(count[i] > 0) {
            printf(""%d "", i);
        }
    }
    printf(""\n"");
    
    return 0;
}
",C,"#include <stdio.h>

int main() {
    // Write your code here
    return 0;
}","1
5",5,EDGE_CASE,,,
,,,,,,,,,"10
10 20 10 30 20 40 30 50 60 50",10 20 30 40 50 60,NORMAL_CASE,,,
,,,,,,,,,"6
7 7 5 5 3 3",3 5 7,NORMAL_CASE,,,
,,,,,,,,,"2
1 2",1 2,EDGE_CASE,,,
,,,,,,,,,"4
4 4 4 4",4,NORMAL_CASE,,,
,,,,,,,,,"9
9 8 7 6 5 4 3 2 1",1 2 3 4 5 6 7 8 9,NORMAL_CASE,,,
,,,,,,,,,"9
2 2 2 3 3 3 4 4 4",2 3 4,NORMAL_CASE,,,
,,,,,,,,,"3
100 100 100",100,NORMAL_CASE,,,
,,,,,,,,,"10
1 2 3 4 5 6 7 8 9 10",1 2 3 4 5 6 7 8 9 10,NORMAL_CASE,,,
,,,,,,,,,"15
5 10 5 15 10 20 15 25 20 30 25 35 30 40 35",5 10 15 20 25 30 35 40,NORMAL_CASE,,,
,,,,,,,,,"12
12 12 11 11 10 10 9 9 8 8 7 7",7 8 9 10 11 12,NORMAL_CASE,,,
,,,,,,,,,"8
4 2 4 2 6 8 6 8",2 4 6 8,NORMAL_CASE,,,
,,,,,,,,,"7
7 1 7 1 3 5 3",1 3 5 7,NORMAL_CASE,,,
,,,,,,,,,"5
3 7 5 3 7",3 5 7,NORMAL_CASE,,,
,,,,,,,,,"4
2 4 2 4",2 4,NORMAL_CASE,,,
,,,,,,,,,"8
1 1 2 2 3 3 4 4",1 2 3 4,NORMAL_CASE,,,
,,,,,,,,,"6
10 9 8 7 6 5",5 6 7 8 9 10,NORMAL_CASE,,,
,,,,,,,,,"10
1 3 5 7 9 2 4 6 8 10",1 2 3 4 5 6 7 8 9 10,NORMAL_CASE,,,
,,,,,,,,,"3
9 9 9",9,EDGE_CASE,,,
,,,,,,,,,"8
4 8 4 2 8 4 2 6",2 4 6 8,NORMAL_CASE,,,
,,,,,,,,,"5
11 11 12 12 11",11 12,NORMAL_CASE,,,
,,,,,,,,,"3
1 2 3",1 2 3,EDGE_CASE,,,
,,,,,,,,,"11
100 99 98 97 96 95 94 93 92 91 90",90 91 92 93 94 95 96 97 98 99 100,NORMAL_CASE,,,
,,,,,,,,,"10
20 30 20 40 50 30 60 70 40 80",20 30 40 50 60 70 80,NORMAL_CASE,,,
,,,,,,,,,"6
9 8 8 7 6 6",6 7 8 9,NORMAL_CASE,,,
,,,,,,,,,"4
2 2 4 4",2 4,NORMAL_CASE,,,
,,,,,,,,,"2
1 1",1,EDGE_CASE,,,
,,,,,,,,,"8
8 6 6 4 2 2 5 5",2 4 5 6 8,NORMAL_CASE,,,
,,,,,,,,,,,,,,
3,EASY,"### Distinct House Identifiers

VillaNumb is a village where each house is expected to have a unique identifier. Recently, confusion arose when some houses were found to have duplicate numbers. The village head has asked you to correct this. Given a list `arr` of house numbers, ensure all numbers are unique and provide the result in <HighlightedText>increasing order</HighlightedText>.

---

#### Input Format
The input consists of:

- `n`-> number of houses in the list `arr`.
- `arr` -> `n` space-separated integers representing house numbers in VillaNumb.

#### Output Format
- A list of unique house numbers.

---

#### Constraints
- 1 <=`n`<= 10^5
- The house numbers list `arr` consists only of Positive Integers.

---

#### Example
###### Input
    7
    10 11 11 12 13 12 14

###### Output
    10 11 12 13 14

---

#### Explanation
In the given example, the input list is `[10, 11, 11, 12, 13, 12, 14]`. By removing duplicates and sorting, we obtain the output list `[10, 11, 12, 13, 14]`.
",Distinct House Identifiers,DATA_TYPE_LIST,PYTHON,"n = int(input())
arr = list(map(int, input().split()))
arr = sorted(set(arr))
print(' '.join(map(str, arr)))
",PYTHON,"#Write your code here
",,,,,,true
,,,,,JAVA,"import java.util.*;

public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] arr = new int[n];
        for(int i = 0; i < n; i++) {
            arr[i] = scanner.nextInt();
        }

        Arrays.sort(arr);

        System.out.print(arr[0] + "" "");
        for(int i = 1; i < n; i++) {
            if(arr[i] != arr[i-1]) {
                System.out.print(arr[i] + "" "");
            }
        }
        System.out.println();
        scanner.close();
    }
}
",JAVA,"import java.util.Scanner;
 
class Main {
    public static void main(String[] args) {
        //Write your code below
    }
}","7
10 11 11 12 13 12 14",10 11 12 13 14,NORMAL_CASE,,,
,,,,,CPP,"#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

int main(){
    int n;
    cin >> n;
    vector<int> arr(n);
    for(int &num : arr) {
        cin >> num;
    }

    sort(arr.begin(), arr.end());

    cout << arr[0] << "" "";
    for(int i = 1; i < n; i++) {
        if(arr[i] != arr[i-1]) {
            cout << arr[i] << "" "";
        }
    }
    cout << endl;
    return 0;
}
",CPP,"#include <bits/stdc++.h>

using namespace std;

int main()
{
     //Write your code here
     return 0;
}","5
1 2 3 4 4",1 2 3 4,NORMAL_CASE,,,
,,,,,C,"#include <stdio.h>
#include <stdlib.h>

int compare(const void *a, const void *b) {
    return (*(int *)a - *(int *)b);
}

int main() {
    int n;
    scanf(""%d"", &n);
    int arr[n];
    for(int i = 0; i < n; i++) {
        scanf(""%d"", &arr[i]);
    }

    qsort(arr, n, sizeof(int), compare);

    printf(""%d "", arr[0]);
    for(int i = 1; i < n; i++) {
        if(arr[i] != arr[i-1]) {
            printf(""%d "", arr[i]);
        }
    }
    printf(""\n"");
    return 0;
}
",C,"#include <stdio.h>

int main()
{
     //Write your code here
     return 0;
}","10
10 20 30 40 50 60 70 80 90 100",10 20 30 40 50 60 70 80 90 100,NORMAL_CASE,,,
,,,,,,,,,"10
50 40 30 20 10 10 20 30 40 50",10 20 30 40 50,NORMAL_CASE,,,
,,,,,,,,,"1
100",100,EDGE_CASE,,,
,,,,,,,,,"2
2 2",2,EDGE_CASE,,,
,,,,,,,,,"4
25 25 25 25",25,NORMAL_CASE,,,
,,,,,,,,,"6
1 1 1 2 2 2",1 2,NORMAL_CASE,,,
,,,,,,,,,"8
1000 999 998 997 996 995 994 993",993 994 995 996 997 998 999 1000,NORMAL_CASE,,,
,,,,,,,,,"9
10 20 30 40 50 60 70 80 90 90",10 20 30 40 50 60 70 80 90,NORMAL_CASE,,,
,,,,,,,,,"3
1 1 100000",1 100000,EDGE_CASE,,,
,,,,,,,,,"5
1 100 1000 10000 100000",1 100 1000 10000 100000,NORMAL_CASE,,,
,,,,,,,,,"6
100 200 300 400 500 600",100 200 300 400 500 600,NORMAL_CASE,,,
,,,,,,,,,"6
600 500 400 300 200 100",100 200 300 400 500 600,NORMAL_CASE,,,
,,,,,,,,,"3
50 50 50",50,NORMAL_CASE,,,
,,,,,,,,,"8
3 1 4 1 5 9 2 6",1 2 3 4 5 6 9,NORMAL_CASE,,,
,,,,,,,,,"10
10 10 10 10 10 10 10 10 10 10",10,NORMAL_CASE,,,
,,,,,,,,,"7
7 6 5 4 3 2 1",1 2 3 4 5 6 7,NORMAL_CASE,,,
,,,,,,,,,"5
99999 99999 99999 99999 99999",99999,EDGE_CASE,,,
,,,,,,,,,"5
95 89 42 75 20",20 42 75 89 95,NORMAL_CASE,,,
,,,,,,,,,"2
100 100",100,EDGE_CASE,,,
,,,,,,,,,"4
400 300 300 200",200 300 400,NORMAL_CASE,,,
,,,,,,,,,"6
60 70 60 70 60 70",60 70,NORMAL_CASE,,,
,,,,,,,,,"7
7 7 7 7 7 7 7",7,NORMAL_CASE,,,
,,,,,,,,,"3
2 2 2",2,NORMAL_CASE,,,
,,,,,,,,,"3
1000 1000 1000",1000,NORMAL_CASE,,,
,,,,,,,,,"4
4 4 4 4",4,NORMAL_CASE,,,
,,,,,,,,,"6
15 15 30 30 45 45",15 30 45,NORMAL_CASE,,,
,,,,,,,,,"8
8 7 6 5 4 3 2 1",1 2 3 4 5 6 7 8,NORMAL_CASE,,,
,,,,,,,,,"7
2 2 3 3 4 4 5",2 3 4 5,NORMAL_CASE,,,
,,,,,,,,,,,,,,
4,EASY,"### House Number Organize

There's a quaint village where every house number must be unique. However, a recent event led to duplicated house numbers causing confusion. They have requested your help to normalize the house numbers. Given a list `arr` of house numbers, remove duplicates and provide a list of unique numbers in <HighlightedText>increasing order</HighlightedText>.

---

#### Input Format
The input consists of:

- `n`-> number of houses in the list `arr`.
- `arr` -> `n` space-separated integers representing house numbers in the village.

#### Output Format
- A list of unique house numbers.

---

#### Constraints
- 1 <=`n`<= 10^5
- The house numbers list `arr` consists only of Positive Integers.

---

#### Example
###### Input
    6
    20 20 18 17 19 18

###### Output
    17 18 19 20

---

#### Explanation
In the given example, the input list is `[20, 20, 18, 17, 19, 18]`. After removing duplicates and sorting, the output is `[17, 18, 19, 20]`.
",House Number Organize,DATA_TYPE_LIST,PYTHON,"n = int(input())
arr = list(map(int, input().split()))
unique_houses = sorted(set(arr))
print(' '.join(map(str, unique_houses)))
",PYTHON,"# Write your code here
",,,,,,true
,,,,,JAVA,"import java.util.*;

public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        Set<Integer> uniqueHouses = new TreeSet<>();
        for (int i = 0; i < n; i++) {
            uniqueHouses.add(scanner.nextInt());
        }
        for (int house : uniqueHouses) {
            System.out.print(house + "" "");
        }
        System.out.println();
        scanner.close();
    }
}
",JAVA,"import java.util.Scanner;

class Main {
    public static void main(String[] args) {
        // Write your code below
    }
}","6
20 20 18 17 19 18",17 18 19 20,NORMAL_CASE,,,
,,,,,CPP,"#include <iostream>
#include <vector>
#include <set>
using namespace std;

int main() {
    int n;
    cin >> n;
    set<int> uniqueHouses;
    for (int i = 0; i < n; ++i) {
        int houseNumber;
        cin >> houseNumber;
        uniqueHouses.insert(houseNumber);
    }
    for (auto house : uniqueHouses) {
        cout << house << "" "";
    }
    cout << endl;
    return 0;
}",CPP,"#include <bits/stdc++.h>

using namespace std;

int main()
{
     // Write your code here
     return 0;
}","5
5 3 3 2 1",1 2 3 5,NORMAL_CASE,,,
,,,,,C,"#include <stdio.h>
#include <stdlib.h>

int cmpfunc(const void *a, const void *b) {
    return (*(int *)a - *(int *)b);
}

int main() {
    int n;
    scanf(""%d"", &n);
    int arr[n];
    for (int i = 0; i < n; i++) {
        scanf(""%d"", &arr[i]);
    }

    qsort(arr, n, sizeof(int), cmpfunc);

    printf(""%d"", arr[0]);
    for (int i = 1; i < n; i++) {
        if (arr[i] != arr[i-1]) {
            printf("" %d"", arr[i]);
        }
    }
    printf(""\n"");

    return 0;
}",C,"#include <stdio.h>

int main()
{
     // Write your code here
     return 0;
}","1
42",42,EDGE_CASE,,,
,,,,,,,,,"10
3 3 3 3 3 3 3 3 3 3",3,EDGE_CASE,,,
,,,,,,,,,"10
9 8 7 6 5 4 3 2 1 0",0 1 2 3 4 5 6 7 8 9,NORMAL_CASE,,,
,,,,,,,,,"10
1 2 3 4 5 6 7 8 9 10",1 2 3 4 5 6 7 8 9 10,NORMAL_CASE,,,
,,,,,,,,,"8
2 4 6 8 10 12 14 16",2 4 6 8 10 12 14 16,NORMAL_CASE,,,
,,,,,,,,,"12
7 7 3 3 9 9 11 11 2 2 5 5",2 3 5 7 9 11,NORMAL_CASE,,,
,,,,,,,,,"6
35 23 56 45 68 35",23 35 45 56 68,NORMAL_CASE,,,
,,,,,,,,,"15
15 14 13 12 11 10 9 8 7 6 5 4 3 2 1",1 2 3 4 5 6 7 8 9 10 11 12 13 14 15,NORMAL_CASE,,,
,,,,,,,,,"6
60 60 70 70 80 80",60 70 80,NORMAL_CASE,,,
,,,,,,,,,"5
22 31 22 40 31",22 31 40,NORMAL_CASE,,,
,,,,,,,,,"9
100 200 300 100 400 200 500 300 600",100 200 300 400 500 600,NORMAL_CASE,,,
,,,,,,,,,"4
55 55 55 55",55,EDGE_CASE,,,
,,,,,,,,,"7
13 13 9 9 7 5 5",5 7 9 13,NORMAL_CASE,,,
,,,,,,,,,"8
33 22 11 44 55 66 77 88",11 22 33 44 55 66 77 88,NORMAL_CASE,,,
,,,,,,,,,"5
101 105 102 104 103",101 102 103 104 105,NORMAL_CASE,,,
,,,,,,,,,"6
10 8 6 4 2 0",0 2 4 6 8 10,NORMAL_CASE,,,
,,,,,,,,,"5
888 777 666 555 444",444 555 666 777 888,NORMAL_CASE,,,
,,,,,,,,,"11
9 9 8 8 7 7 6 6 5 5 4",4 5 6 7 8 9,NORMAL_CASE,,,
,,,,,,,,,"15
3 3 6 6 9 9 12 12 15 15 18 18 21 21 24",3 6 9 12 15 18 21 24,NORMAL_CASE,,,
,,,,,,,,,"14
85 78 74 69 85 78 74 69 58 45 39 29 15 5",5 15 29 39 45 58 69 74 78 85,NORMAL_CASE,,,
,,,,,,,,,"10
43 84 25 46 57 68 79 91 35 24",24 25 35 43 46 57 68 79 84 91,NORMAL_CASE,,,
,,,,,,,,,"7
10000 100000 50000 1000 500 1000 100000",500 1000 10000 50000 100000,NORMAL_CASE,,,
,,,,,,,,,"9
9999 8888 7777 6666 5555 4444 3333 2222 1111",1111 2222 3333 4444 5555 6666 7777 8888 9999,NORMAL_CASE,,,
,,,,,,,,,"6
99 98 97 96 95 94",94 95 96 97 98 99,NORMAL_CASE,,,
,,,,,,,,,"6
43 43 43 21 21 11",11 21 43,NORMAL_CASE,,,
,,,,,,,,,"5
7 14 21 28 35",7 14 21 28 35,NORMAL_CASE,,,
,,,,,,,,,"8
89 67 45 23 45 67 89 23",23 45 67 89,NORMAL_CASE,,,
,,,,,,,,,"1
1",1,EDGE_CASE,,,
,,,,,,,,,,,,,,
5,EASY,"### Unique House List

In the serene village of Numland, it is imperative that each house has a unique number. Some visitors noticed duplicates which brought about a small commotion. They've asked for assistance to resolve the issue. Given a list `arr` of house numbers, eliminate any duplicates and present a list of unique house numbers in <HighlightedText>increasing order</HighlightedText>.

---

#### Input Format
The input consists of:

- `n`-> number of houses in the list `arr`.
- `arr` -> `n` space-separated integers representing house numbers in Numland.

#### Output Format
- A list of unique house numbers.

---

#### Constraints
- 1 <=`n`<= 10^5
- The house numbers list `arr` consists only of Positive Integers.

---

#### Example
###### Input
    9
    14 14 15 16 17 18 16 15 17

###### Output
    14 15 16 17 18

---

#### Explanation
In the given example, the input list is `[14, 14, 15, 16, 17, 18, 16, 15, 17]`. By removing duplicates and sorting, we get the output list `[14, 15, 16, 17, 18]`.
",Unique House List,DATA_TYPE_LIST,PYTHON,"n = int(input())
arr = list(map(int, input().split()))
unique_sorted_houses = sorted(set(arr))
print(' '.join(map(str, unique_sorted_houses)))
",PYTHON,"#Write your code here
",,,,,,true
,,,,,JAVA,"import java.util.Arrays;
import java.util.Scanner;
import java.util.stream.Collectors;

public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] arr = new int[n];
        for(int i = 0; i < n; i++){
            arr[i] = scanner.nextInt();
        }

        Arrays.sort(arr);

        System.out.print(arr[0]);
        for(int i = 1; i < n; i++){
            if(arr[i] != arr[i - 1]){
                System.out.print("" "" + arr[i]);
            }
        }
        System.out.println();

        scanner.close();
    }
}
",JAVA,"import java.util.Scanner;
 
class Main {
    public static void main(String[] args) {
        //Write your code below
    }
}
","9
14 14 15 16 17 18 16 15 17",14 15 16 17 18,NORMAL_CASE,,,
,,,,,CPP,"#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

int main() {
    int n;
    cin >> n;
    vector<int> arr(n);
    for (int i = 0; i < n; i++) {
        cin >> arr[i];
    }

    sort(arr.begin(), arr.end());

    cout << arr[0];
    for (int i = 1; i < n; i++) {
        if (arr[i] != arr[i - 1]) {
            cout << "" "" << arr[i];
        }
    }
    cout << endl;

    return 0;
}
",CPP,"#include <bits/stdc++.h>

using namespace std;

int main()
{
     //Write your code here
     return 0;
}","5
1 2 3 4 5",1 2 3 4 5,NORMAL_CASE,,,
,,,,,C,"#include <stdio.h>
#include <stdlib.h>

int cmpfunc(const void *a, const void *b) {
    return (*(int *)a - *(int *)b);
}

int main() {
    int n;
    scanf(""%d"", &n);
    int arr[n];
    for (int i = 0; i < n; i++) {
        scanf(""%d"", &arr[i]);
    }

    qsort(arr, n, sizeof(int), cmpfunc);

    printf(""%d"", arr[0]);
    for (int i = 1; i < n; i++) {
        if (arr[i] != arr[i - 1]) {
            printf("" %d"", arr[i]);
        }
    }
    printf(""\n"");

    return 0;
}
",C,"#include <stdio.h>

int main()
{
     //Write your code here
     return 0;
}","10
9 8 7 6 5 4 3 2 1 1",1 2 3 4 5 6 7 8 9,EDGE_CASE,,,
,,,,,,,,,"1
100",100,EDGE_CASE,,,
,,,,,,,,,"7
20 30 30 40 40 50 50",20 30 40 50,NORMAL_CASE,,,
,,,,,,,,,"15
99999 99998 99997 99999 99998 99997 100000 100000 100000 1 2 3 4 5 6",1 2 3 4 5 6 99997 99998 99999 100000,EDGE_CASE,,,
,,,,,,,,,"6
5 5 5 5 5 5",5,EDGE_CASE,,,
,,,,,,,,,"4
10 10 10 10",10,NORMAL_CASE,,,
,,,,,,,,,"6
35 36 35 36 35 36",35 36,NORMAL_CASE,,,
,,,,,,,,,"8
100 101 102 103 104 105 106 106",100 101 102 103 104 105 106,NORMAL_CASE,,,
,,,,,,,,,"2
1000 1000",1000,EDGE_CASE,,,
,,,,,,,,,"9
3 2 5 6 0 3 2 5 6",0 2 3 5 6,EDGE_CASE,,,
,,,,,,,,,"3
20 15 15",15 20,NORMAL_CASE,,,
,,,,,,,,,"10
50 49 48 47 46 45 44 43 42 41",41 42 43 44 45 46 47 48 49 50,NORMAL_CASE,,,
,,,,,,,,,"5
33 33 33 34 34",33 34,NORMAL_CASE,,,
,,,,,,,,,"7
27 25 24 24 25 27 27",24 25 27,NORMAL_CASE,,,
,,,,,,,,,"8
21 23 21 22 21 23 22 21",21 22 23,NORMAL_CASE,,,
,,,,,,,,,"6
31 32 32 33 34 34",31 32 33 34,NORMAL_CASE,,,
,,,,,,,,,"10
100 100 100 101 101 101 102 102 103 103",100 101 102 103,NORMAL_CASE,,,
,,,,,,,,,"12
45 45 46 46 47 47 48 48 49 49 50 50",45 46 47 48 49 50,NORMAL_CASE,,,
,,,,,,,,,"14
1 2 3 4 5 6 7 8 9 10 11 12 13 14",1 2 3 4 5 6 7 8 9 10 11 12 13 14,NORMAL_CASE,,,
,,,,,,,,,"9
21 22 22 23 23 24 24 25 25",21 22 23 24 25,NORMAL_CASE,,,
,,,,,,,,,"6
51 52 53 53 54 55",51 52 53 54 55,NORMAL_CASE,,,
,,,,,,,,,"9
30 31 32 33 34 35 35 36 36",30 31 32 33 34 35 36,NORMAL_CASE,,,
,,,,,,,,,"4
70 70 80 80",70 80,NORMAL_CASE,,,
,,,,,,,,,"5
90 90 90 100 100",90 100,NORMAL_CASE,,,
,,,,,,,,,"3
15 25 35",15 25 35,NORMAL_CASE,,,
,,,,,,,,,"6
60 60 70 70 80 80",60 70 80,EDGE_CASE,,,
,,,,,,,,,"8
11 22 33 44 11 22 33 44",11 22 33 44,NORMAL_CASE,,,
,,,,,,,,,"3
200 100 100",100 200,NORMAL_CASE,,,
,,,,,,,,,,,,,,
